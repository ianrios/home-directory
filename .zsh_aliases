# Constants

# TODO: split out built specific actions to new file

# Protected branches (do not add changes to these branches)
PROTECTED_BRANCHES=("develop" "staging" "qa" "production" "master" "merge-queue")
# TODO: add more protected branches to array

# Functions

# git log with minimal information
minimal_git_log() {
    c
    git log --pretty=format:'%C(yellow)%h %Cred%ad  %Creset%s' --date=local
}

# show and color code all available branches
show_all_branches() {
    c
    git for-each-ref --sort=-committerdate --format="%(color:blue)%(authordate:relative)%09%(color:red)%(authorname)%09%(color:white)%(color:bold)%(refname:short)" refs/remotes
}

# show and color code all local branches
show_local_branches() {
    c
    git for-each-ref --sort=-committerdate --count=10 refs/heads/ --format="%(HEAD) %(color:yellow)%(refname:short)%(color:reset) - %(color:red)%(objectname:short)%(color:reset) - %(contents:subject) - %(authorname) (%(color:green)%(committerdate:relative)%(color:reset))"
}

# check if branch is in PROTECTED_BRANCHES array
is_branch_protected() {
    # check to make sure we arent on any protected branches
    CURRENT_BRANCH="$(git rev-parse --abbrev-ref HEAD)"
    if [[ ${PROTECTED_BRANCHES[@]} =~ $CURRENT_BRANCH ]]; then
        # we were on a protected branch, return true
        echo -e "${RED}ERROR:${NC} branch is protected; switch branches and try again."
        return 0
    fi
    # the branch is not protected, return false
    return 1
}

# git pull origin develop (switch to develop if not already on, then switch back and merge)
git_pull_origin_develop() {
    # save current branch name
    BRANCH="$(git rev-parse --abbrev-ref HEAD)"
    if [[ "$BRANCH" != "develop" ]]; then
        # branch is not develop, checkout develop
        git checkout develop
    fi
    # branch is develop
    git pull origin develop
    if [[ "$BRANCH" != "develop" ]]; then
        # branch was not develop, checkout to original branch
        git checkout $BRANCH
        # merge develop in without requiring custom commit message
        # (it's a simple merge of develop into feature branch, no edit needed)
        git merge develop --no-edit
    fi

    echo -e "${GREEN}Done${NC}"

    return
}

# naming convention usage
new_branch_naming_conventions_usage() {
    echo "Branching strategy failed; pattern not matched."
    echo -e "Must supply three arguments, branch type, branch name, and branch title (e.g, grtb ${GREEN}feature${NC} ${BLUE}UX${NC}${RED}-${NC}${BLUE}123${NC} ${WHITE}new-ux-improvement${NC})"
    echo -e "- Where branch type should match one of type ${GREEN}feature${NC}|${YELLOW}bugfix${NC}|${BLUE}release${NC}|${RED}hotfix${NC}|${PURPLE}chore${NC}"
    echo -e "- Where branch name should match format ${BLUE}B4C${NC}${RED}-${NC}${BLUE}12345${NC}"
    echo -e "- Where branch title should match format ${WHITE}new-feature${NC})"
    echo ""
    return
}

# create new branch, switch to it, and link remote to origin
git_remote_tracking_branch() {
    # make sure we have three arguments
    if [ $# -ne 3 ]; then
        echo -e "${YELLOW}ERROR:${NC}${RED} $# ${NC}arguments provided, expected exactly three ${GREEN}3${NC}"
        new_branch_naming_conventions_usage
        return
    fi
    # save branch from command line
    BRANCH_TYPE="$1"
    BRANCH_NAME="$2"
    BRANCH_TITLE="$3"
    # check to make sure new branch follows Built conventions
    if ! [[ "$BRANCH_TYPE" =~ ^(feature|bugfix|release|hotfix|chore)$ ]]; then
        echo -e "${YELLOW}ERROR:${NC} branch type ${RED}'$BRANCH_TYPE'${NC} does not match avaliable types"
        new_branch_naming_conventions_usage
        return
    fi
    if ! [[ "$BRANCH_NAME" =~ [A-Za-z0-9]+-[0-9]+ ]]; then
        echo -e "${YELLOW}ERROR:${NC} branch name ${RED}'$BRANCH_NAME'${NC} does not match match regex"
        new_branch_naming_conventions_usage
        return
    fi
    if ! [[ "$BRANCH_TITLE" =~ [-A-Za-z]+ ]]; then
        echo -e "${YELLOW}ERROR:${NC} branch title ${RED}'$BRANCH_TITLE'${NC} does not match match regex"
        new_branch_naming_conventions_usage
        return
    fi

    # passed each if statement, good to create branch & push
    echo -e "${LIGHTGREEN}Passed checks!${NC}"
    # always base new branch off of develop
    # check if we are currently on develop
    echo "> Basing new branch off of develop"
    CURRENT_BRANCH="$(git rev-parse --abbrev-ref HEAD)"
    if [[ "$CURRENT_BRANCH" != "develop" ]]; then
        # branch is not develop, checkout develop
        git checkout develop
    fi
    # branch is now confirmed to be develop, pulling recent changes
    git pull origin develop
    # create branch to use for checkout
    NEW_BRANCH="$BRANCH_TYPE/$BRANCH_NAME-$BRANCH_TITLE"
    # actually create and check out the new branch
    git checkout -b $NEW_BRANCH
    # replace the title with spaces
    BRANCH_TITLE_SPACES="${BRANCH_TITLE//-/ }"
    # set first commit
    git commit --allow-empty -m "$BRANCH_NAME - $BRANCH_TITLE_SPACES"
    # set upstream
    git push -u origin $NEW_BRANCH
    # note for developer to go create new PR right away
    echo -e "${WHITE}Go create a PR in the repo now in order to save your branch title easilly${NC}"
    echo -e "${WHITE}Run ${NC}${LIGHTCYAN}open-repo${NC}${WHITE} to access this branch on github.com in the command line${NC}"

    # open current branch
    tw git open

    echo -e "${GREEN}Done${NC}"

    return
}

# git commit with message, then push to origin
git_commit_push_origin() {
    # check if git message supplied
    if [ $# -eq 0 ]; then
        # no message
        echo -e "${YELLOW}ERROR:${NC} No commit message supplied, make sure to use quotes and do not include special characters like ${LIGHTCYAN}'&'${NC}"
        return
    fi

    # check if branch is protected
    if is_branch_protected; then return; fi
    # we can commit to this branch, so continue

    # save commit message from command line
    COMMIT_MESSAGE="$1"
    git commit -m $COMMIT_MESSAGE
    git push

    # ask if we want to pull develop
    echo -e "${YELLOW}Would you like to pull newest changes in from develop? (Yes/No)${NC}"
    read yn
    case $yn in
    [Yy]*) git_pull_origin_develop && git push ;;
    [Nn]*) echo "Skipped pulling in changes" ;;
    *) echo "Please answer yes or no." ;;
    esac

    # ask if we want to run tests
    echo -e "${YELLOW}Would you like to run tests? (Yes/No)${NC}"
    read yn
    case $yn in
    [Yy]*) npm run test ;;
    [Nn]*) echo "Skipped running tests" ;;
    *) echo "Please answer yes or no." ;;
    esac

    echo -e "${GREEN}Done${NC}"

    return
}

# git add updates in patch mode
git_add_updates_patch() {
    # check if branch is protected
    if is_branch_protected; then return; fi
    # we can add to this branch, so continue

    # add updated files that are currently tracked via patch mode
    git add -up

    # run git status
    git status

    echo -e "If there are changes listed above in green, run ${LIGHTCYAN}gcpo \"with a message\"${NC} to commit and push to your origin branch"

    # commit all new files one at a time
    echo -e "${YELLOW}Would you like to add new files? (Yes/No)${NC}"
    read yn
    case $yn in
    [Yy]*) git add -N . ;;
    [Nn]*) echo "Skipped adding new files" ;;
    *) echo "Please answer yes or no." ;;
    esac

    echo -e "${GREEN}Done${NC}"

    return
}

# pull, nvm use, install, and generate schema
pull_use_install_generate() {
    # pull latest changes
    echo -e "${PURPLE}Pulling latest changes${NC}"
    gpod
    # use correct node version
    echo -e "${PURPLE}Using correct node version${NC}"
    nvm use
    # install latest packages
    echo -e "${PURPLE}Installing latest packages${NC}"
    echo -e "${YELLOW}If this hangs, you need to connect to the VPN via Tunnelblick${NC}"
    npm i
    # generate schema
    echo -e "${PURPLE}Generating schema${NC}"
    npm run generate

    # ask if we want to run app
    echo -e "${YELLOW}Would you like to start the app via ${LIGHTCYAN}npm run start${YELLOW}? (Yes/No)${NC}"
    read yn
    case $yn in
    [Yy]*) npm run start ;;
    [Nn]*) echo "Skipped starting app" ;;
    *) echo "Please answer yes or no." ;;
    esac

    echo -e "${GREEN}Done${NC}"

    return
}

# aws login choose profile
aws_login_choose_profile() {
    if [ $# -eq 0 ]; then
        echo -e "${YELLOW}ERROR:${NC} No arguments supplied, make sure to use ${LIGHTCYAN}d${NC} for ${PURPLE}'dev-developer'${NC} or ${LIGHTCYAN}k${NC} for ${PURPLE}'eksdev'${NC}"
        return
    fi
    # use d or k for the arguments to login to dev-developer or eksdev
    if [ "$1" = "d" ]; then
        echo -e "Logging into aws using ${LIGHTCYAN}dev-developer${NC} profile"
        AWS_PROFILE=dev-developer aws sso login
    elif [ "$1" = "k" ]; then
        echo -e "Logging into aws using ${LIGHTCYAN}eksdev${NC} profile"
        aws sso login --profile eksdev && aws sts get-caller-identity --profile eksdev
        echo "Connecting to eksdev cluster"
        k8-connect
    else
        echo -e "${YELLOW}ERROR:${NC} Invalid Argument, make sure to use ${LIGHTCYAN}d${NC} for ${PURPLE}'dev-developer'${NC} or ${LIGHTCYAN}k${NC} for ${PURPLE}'eksdev'${NC}"
        return
    fi

    echo -e "${GREEN}Done${NC}"

    return
}

# welcome message on open of new zsh terminal
welcome() {
    # welcome message
    echo -e "Don't forget to use your aliases!\nRun ${LIGHTCYAN}\e[4m\e[3ma\e[0m${NC} to remember what they all are!"
    return
}

# Aliases

# short form alias
alias a='clear && alias'

# short form source ~/.zshrc
alias sz='source ~/.zshrc'

# replace code-insiders with code to easily open new repo
alias code="code-insiders"

# color code and list all files
alias ls="ls -A --color=auto -h"

# what is my ip
alias myip='curl ipinfo.io/ip'

# make parent directory if it doesnt exist
alias mkdir='mkdir -p'

# short form clear terminal
alias c='clear'

# short form git status
alias gs='git status'

# show and color code all available branches
alias branches=show_all_branches

# show and color code all local branches
alias blocal=show_local_branches

# git add only updated tracked files (not new files) via patch mode one change at a time
alias gaps=git_add_updates_patch

# git commit with message and then push to origin
alias gcpo=git_commit_push_origin

# git create new branch and link remote tracking branch
alias grtb=git_remote_tracking_branch

# git pull origin develop
alias gpod=git_pull_origin_develop

# minimized git log
alias glog=minimal_git_log

# git log but the timeline graph version
alias ggraph='git log --oneline --decorate --graph --all'

# open current repo in browser
alias open-repo="tw git open"

# Built specific

# check for npm updates via npx
alias ncu="npx npm-check-updates"

# check for built updates
alias updatebuilt="ncu -u '/^@built/'"

# short form update built
alias ub="updatebuilt"

# aws login
alias sso=aws_login_choose_profile

# pull, nvm use, install, and generate schema
alias prepare=pull_use_install_generate
